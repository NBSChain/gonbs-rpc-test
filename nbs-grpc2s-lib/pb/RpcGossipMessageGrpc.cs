// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpcGossipMessage.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Pb {
  public static partial class GossipTask
  {
    static readonly string __ServiceName = "pb.GossipTask";

    static readonly grpc::Marshaller<global::Pb.StartRequest> __Marshaller_pb_StartRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.StartRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pb.StartResponse> __Marshaller_pb_StartResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.StartResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pb.StopRequest> __Marshaller_pb_StopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.StopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pb.StopResponse> __Marshaller_pb_StopResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.StopResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pb.DebugCmd> __Marshaller_pb_DebugCmd = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.DebugCmd.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pb.DebugResult> __Marshaller_pb_DebugResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pb.DebugResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Pb.StartRequest, global::Pb.StartResponse> __Method_startService = new grpc::Method<global::Pb.StartRequest, global::Pb.StartResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "startService",
        __Marshaller_pb_StartRequest,
        __Marshaller_pb_StartResponse);

    static readonly grpc::Method<global::Pb.StopRequest, global::Pb.StopResponse> __Method_stopService = new grpc::Method<global::Pb.StopRequest, global::Pb.StopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "stopService",
        __Marshaller_pb_StopRequest,
        __Marshaller_pb_StopResponse);

    static readonly grpc::Method<global::Pb.DebugCmd, global::Pb.DebugResult> __Method_debug = new grpc::Method<global::Pb.DebugCmd, global::Pb.DebugResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "debug",
        __Marshaller_pb_DebugCmd,
        __Marshaller_pb_DebugResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pb.RpcGossipMessageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GossipTask</summary>
    public abstract partial class GossipTaskBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Pb.StartResponse> startService(global::Pb.StartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Pb.StopResponse> stopService(global::Pb.StopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Pb.DebugResult> debug(global::Pb.DebugCmd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GossipTask</summary>
    public partial class GossipTaskClient : grpc::ClientBase<GossipTaskClient>
    {
      /// <summary>Creates a new client for GossipTask</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GossipTaskClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GossipTask that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GossipTaskClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GossipTaskClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GossipTaskClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Pb.StartResponse startService(global::Pb.StartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return startService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pb.StartResponse startService(global::Pb.StartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_startService, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.StartResponse> startServiceAsync(global::Pb.StartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return startServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.StartResponse> startServiceAsync(global::Pb.StartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_startService, null, options, request);
      }
      public virtual global::Pb.StopResponse stopService(global::Pb.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return stopService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pb.StopResponse stopService(global::Pb.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_stopService, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.StopResponse> stopServiceAsync(global::Pb.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return stopServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.StopResponse> stopServiceAsync(global::Pb.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_stopService, null, options, request);
      }
      public virtual global::Pb.DebugResult debug(global::Pb.DebugCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return debug(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Pb.DebugResult debug(global::Pb.DebugCmd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_debug, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.DebugResult> debugAsync(global::Pb.DebugCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return debugAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Pb.DebugResult> debugAsync(global::Pb.DebugCmd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_debug, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GossipTaskClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GossipTaskClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GossipTaskBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_startService, serviceImpl.startService)
          .AddMethod(__Method_stopService, serviceImpl.stopService)
          .AddMethod(__Method_debug, serviceImpl.debug).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GossipTaskBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_startService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pb.StartRequest, global::Pb.StartResponse>(serviceImpl.startService));
      serviceBinder.AddMethod(__Method_stopService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pb.StopRequest, global::Pb.StopResponse>(serviceImpl.stopService));
      serviceBinder.AddMethod(__Method_debug, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Pb.DebugCmd, global::Pb.DebugResult>(serviceImpl.debug));
    }

  }
}
#endregion
