// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpcAddMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from rpcAddMsg.proto</summary>
  public static partial class RpcAddMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for rpcAddMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcAddMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ycGNBZGRNc2cucHJvdG8SAnBiIhwKCUZpbGVDaHVuaxIPCgdjb250ZW50",
            "GAEgASgMIooBCgpBZGRSZXF1ZXN0EhAKCGZpbGVOYW1lGAEgASgJEhAKCGZ1",
            "bGxQYXRoGAIgASgJEhAKCGZpbGVTaXplGAMgASgDEh4KCGZpbGVUeXBlGAQg",
            "ASgOMgwucGIuRmlsZVR5cGUSFAoMc3BsaXR0ZXJTaXplGAUgASgFEhAKCGZp",
            "bGVEYXRhGAYgASgMImoKC0FkZFJlc3BvbnNlEg8KB21lc3NhZ2UYASABKAkS",
            "EQoJc2Vzc2lvbklkGAIgASgJEgwKBG5hbWUYAyABKAkSDAoEaGFzaBgEIAEo",
            "CRINCgVieXRlcxgFIAEoAxIMCgRzaXplGAYgASgJKkIKCEZpbGVUeXBlEggK",
            "BEZJTEUQABINCglMQVJHRUZJTEUQARINCglESVJFQ1RPUlkQAhIOCgpTWVNU",
            "RU1MSU5LEAMybQoHQWRkVGFzaxIsCgdBZGRGaWxlEg4ucGIuQWRkUmVxdWVz",
            "dBoPLnBiLkFkZFJlc3BvbnNlIgASNAoOVHJhbnNMYXJnZUZpbGUSDS5wYi5G",
            "aWxlQ2h1bmsaDy5wYi5BZGRSZXNwb25zZSIAKAFCJQoSY29tLm5icy5jb25z",
            "b2xlLnBiQg1ScGNBZGRNZXNzYWdlUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.FileType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.FileChunk), global::Pb.FileChunk.Parser, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.AddRequest), global::Pb.AddRequest.Parser, new[]{ "FileName", "FullPath", "FileSize", "FileType", "SplitterSize", "FileData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.AddResponse), global::Pb.AddResponse.Parser, new[]{ "Message", "SessionId", "Name", "Hash", "Bytes", "Size" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FileType {
    [pbr::OriginalName("FILE")] File = 0,
    [pbr::OriginalName("LARGEFILE")] Largefile = 1,
    [pbr::OriginalName("DIRECTORY")] Directory = 2,
    [pbr::OriginalName("SYSTEMLINK")] Systemlink = 3,
  }

  #endregion

  #region Messages
  public sealed partial class FileChunk : pb::IMessage<FileChunk> {
    private static readonly pb::MessageParser<FileChunk> _parser = new pb::MessageParser<FileChunk>(() => new FileChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.RpcAddMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk(FileChunk other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileChunk Clone() {
      return new FileChunk(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileChunk other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddRequest : pb::IMessage<AddRequest> {
    private static readonly pb::MessageParser<AddRequest> _parser = new pb::MessageParser<AddRequest>(() => new AddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.RpcAddMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest(AddRequest other) : this() {
      fileName_ = other.fileName_;
      fullPath_ = other.fullPath_;
      fileSize_ = other.fileSize_;
      fileType_ = other.fileType_;
      splitterSize_ = other.splitterSize_;
      fileData_ = other.fileData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest Clone() {
      return new AddRequest(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullPath" field.</summary>
    public const int FullPathFieldNumber = 2;
    private string fullPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullPath {
      get { return fullPath_; }
      set {
        fullPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileSize" field.</summary>
    public const int FileSizeFieldNumber = 3;
    private long fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 4;
    private global::Pb.FileType fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.FileType FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "splitterSize" field.</summary>
    public const int SplitterSizeFieldNumber = 5;
    private int splitterSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SplitterSize {
      get { return splitterSize_; }
      set {
        splitterSize_ = value;
      }
    }

    /// <summary>Field number for the "fileData" field.</summary>
    public const int FileDataFieldNumber = 6;
    private pb::ByteString fileData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FileData {
      get { return fileData_; }
      set {
        fileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (FullPath != other.FullPath) return false;
      if (FileSize != other.FileSize) return false;
      if (FileType != other.FileType) return false;
      if (SplitterSize != other.SplitterSize) return false;
      if (FileData != other.FileData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FullPath.Length != 0) hash ^= FullPath.GetHashCode();
      if (FileSize != 0L) hash ^= FileSize.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      if (SplitterSize != 0) hash ^= SplitterSize.GetHashCode();
      if (FileData.Length != 0) hash ^= FileData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (FullPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FullPath);
      }
      if (FileSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FileSize);
      }
      if (FileType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FileType);
      }
      if (SplitterSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SplitterSize);
      }
      if (FileData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(FileData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FullPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullPath);
      }
      if (FileSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FileSize);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      if (SplitterSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SplitterSize);
      }
      if (FileData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRequest other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FullPath.Length != 0) {
        FullPath = other.FullPath;
      }
      if (other.FileSize != 0L) {
        FileSize = other.FileSize;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      if (other.SplitterSize != 0) {
        SplitterSize = other.SplitterSize;
      }
      if (other.FileData.Length != 0) {
        FileData = other.FileData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 18: {
            FullPath = input.ReadString();
            break;
          }
          case 24: {
            FileSize = input.ReadInt64();
            break;
          }
          case 32: {
            fileType_ = (global::Pb.FileType) input.ReadEnum();
            break;
          }
          case 40: {
            SplitterSize = input.ReadInt32();
            break;
          }
          case 50: {
            FileData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddResponse : pb::IMessage<AddResponse> {
    private static readonly pb::MessageParser<AddResponse> _parser = new pb::MessageParser<AddResponse>(() => new AddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.RpcAddMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse(AddResponse other) : this() {
      message_ = other.message_;
      sessionId_ = other.sessionId_;
      name_ = other.name_;
      hash_ = other.hash_;
      bytes_ = other.bytes_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse Clone() {
      return new AddResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sessionId" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 4;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 5;
    private long bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 6;
    private string size_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Size {
      get { return size_; }
      set {
        size_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (SessionId != other.SessionId) return false;
      if (Name != other.Name) return false;
      if (Hash != other.Hash) return false;
      if (Bytes != other.Bytes) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Bytes != 0L) hash ^= Bytes.GetHashCode();
      if (Size.Length != 0) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Hash);
      }
      if (Bytes != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Bytes);
      }
      if (Size.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Bytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bytes);
      }
      if (Size.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Bytes != 0L) {
        Bytes = other.Bytes;
      }
      if (other.Size.Length != 0) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            SessionId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Hash = input.ReadString();
            break;
          }
          case 40: {
            Bytes = input.ReadInt64();
            break;
          }
          case 50: {
            Size = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
